---
# This playbook demonstrates how to use the ansible cloudformation module to launch an AWS CloudFormation stack.
#
# This module requires that the boto python library is installed, and that you have your AWS credentials
# in $HOME/.boto

#The thought here is to bring up a bare infrastructure with CloudFormation, but use ansible to configure it.
#I generally do this in 2 different playbook runs as to allow the ec2.py inventory to be updated.

#This module also uses "complex arguments" which were introduced in ansible 1.1 allowing you to specify the
#Cloudformation template parameters

#This example launches a 3 node AutoScale group, with a security group, and an InstanceProfile with root permissions.

#If a stack does not exist, it will be created.  If it does exist and the template file has changed, the stack will be updated.
#If the parameters are different, the stack will also be updated.

#CloudFormation stacks can take awhile to provision, if you are curious about its status, use the AWS
#web console or one of the CloudFormation CLI's.

#Example update -- try first launching the stack with 3 as the ClusterSize.  After it is launched, change it to 4
#and run the playbook again.

- name: provision stack
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - "vars/cf_vars.yaml"

  # Launch the cloudformation-example.json template.  Register the output.
  tasks:
  - name: launch ansible cloudformation example
    cloudformation:
      stack_name: "ansible-cloudformation"
      state: "present"
      region: "us-east-1"
      disable_rollback: true
      template: "files/opennms.json"
      template_parameters:
        KeyName: "{{ KeyName }}"
        EC2InstanceType: "{{ EC2InstanceType }}"
        MinionCount: "{{ MinionCount }}"
      tags:
        Owner: "jesse"
        Env: "DEV"
    register: stack
    tags:
     - provision
  - name: show stack outputs
    debug:
      msg: "My stack outputs are {{stack.stack_outputs}}"
    tags:
     - provision
  - name: destroy stack
    cloudformation:
      stack_name: "ansible-cloudformation"
      state: "absent"
      region: "us-east-1"
    tags:
     - destroy

- name: common setup
  hosts: tag_aws_cloudformation_stack_name_ansible_cloudformation
  remote_user: ec2-user
  tasks:
  - name: upgrade all packages
    yum: name=* state=latest
    become: yes
    become_user: root
    tags:
     - setup
  - name: install tools
    yum: pkg={{item}} state=latest
    with_items:
     - net-snmp
     - net-snmp-utils
     - net-snmp-devel
     - cmake
     - gcc
     - git
     - gcc-c++
     - tcpdump
    become: yes
    become_user: root
    tags:
     - setup

- name: load generator setup
  hosts: tag_MinionLabInstanceType_loadgen
  remote_user: ec2-user
  tasks:
  - name: download udpgen
    get_url:
      url: https://github.com/j-white/opennms-events-stress-tools/releases/download/2015.10.25/udpgen.centos7
      dest: /usr/bin/udpgen
      mode: 0755
    become: yes
    become_user: root
    tags:
     - setup
  - name: copy start script
    template: src=files/start-udpgen.sh dest=/home/ec2-user/start-udpgen.sh owner=ec2-user group=ec2-user mode=0755
    tags:
     - setup
  - name: copy stop script
    template: src=files/stop-udpgen.sh dest=/home/ec2-user/stop-udpgen.sh owner=ec2-user group=ec2-user mode=0755
    tags:
     - setup

- name: load balancer setup
  hosts: tag_MinionLabInstanceType_loadbalancer
  remote_user: ec2-user
  tasks:
  - name: install nginx
    yum: pkg={{item}} state=latest
    with_items:
     - nginx
     - nginx-mod-stream
    become: yes
    become_user: root
    tags:
     - setup
  - name: configure nginx
    template: src=files/nginx.conf dest=/etc/nginx/nginx.conf owner=root group=root mode=0644
    become: yes
    become_user: root
    tags:
     - setup
  - name: enable and start nginx
    service: name=nginx enabled=yes state=started
    become: yes
    become_user: root
    tags:
     - setup

- name: minion setup
  hosts: tag_MinionLabInstanceType_minion
  remote_user: ec2-user
  tasks:
  - name: install openms yum repository rpm
    yum: name=http://yum.opennms.org/repofiles/opennms-repo-bleeding-rhel6.noarch.rpm state=present
    become: yes
    become_user: root
    tags:
     - setup
  - name: install opennms gpg key
    rpm_key: state=present key=http://yum.opennms.org/OPENNMS-GPG-KEY
    become: yes
    become_user: root
    tags:
     - setup
  - name: allow non-root icmp
    sysctl: name="net.ipv4.ping_group_range" value="0 429496729" sysctl_set=yes state=present reload=yes
    become: yes
    become_user: root
    tags:
     - setup
#  - name: install opennms minion
#    yum: pkg={{item}} state=latest
#    with_items:
#     - opennms-minion
#    become: yes
#    become_user: root
#    tags:
#     - setup
#  - name: enable and start minion
#    service: name=minion enabled=yes state=started
#    become: yes
#    become_user: root
#    tags:
#     - setup


